{
  "_args": [
    [
      {
        "raw": "stream-connect@^1.0.2",
        "scope": null,
        "escapedName": "stream-connect",
        "name": "stream-connect",
        "rawSpec": "^1.0.2",
        "spec": ">=1.0.2 <2.0.0",
        "type": "range"
      },
      "/Users/townerhale/Desktop/GitHub/final-project-mockup/app/node_modules/collect-all"
    ]
  ],
  "_from": "stream-connect@>=1.0.2 <2.0.0",
  "_id": "stream-connect@1.0.2",
  "_inCache": true,
  "_location": "/stream-connect",
  "_nodeVersion": "5.3.0",
  "_npmUser": {
    "name": "75lb",
    "email": "75pound@gmail.com"
  },
  "_npmVersion": "3.5.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "stream-connect@^1.0.2",
    "scope": null,
    "escapedName": "stream-connect",
    "name": "stream-connect",
    "rawSpec": "^1.0.2",
    "spec": ">=1.0.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/collect-all"
  ],
  "_resolved": "https://registry.npmjs.org/stream-connect/-/stream-connect-1.0.2.tgz",
  "_shasum": "18bc81f2edb35b8b5d9a8009200a985314428a97",
  "_shrinkwrap": null,
  "_spec": "stream-connect@^1.0.2",
  "_where": "/Users/townerhale/Desktop/GitHub/final-project-mockup/app/node_modules/collect-all",
  "author": {
    "name": "Lloyd Brookes",
    "email": "75pound@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/75lb/stream-connect/issues"
  },
  "dependencies": {
    "array-back": "^1.0.2"
  },
  "description": "Connects an arbitrary number of streams into a single, combined stream",
  "devDependencies": {
    "coveralls": "^2.11.6",
    "jsdoc-to-markdown": "^1.1.1",
    "stream-via": "^0.1.1",
    "tape": "^4.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "18bc81f2edb35b8b5d9a8009200a985314428a97",
    "tarball": "https://registry.npmjs.org/stream-connect/-/stream-connect-1.0.2.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "caf4c9c252d82e3a8da3850e88490f145fae7967",
  "homepage": "https://github.com/75lb/stream-connect#readme",
  "keywords": [
    "connect",
    "combine",
    "stream",
    "streams",
    "transform"
  ],
  "license": "MIT",
  "main": "./lib/stream-connect.js",
  "maintainers": [
    {
      "name": "75lb",
      "email": "75pound@gmail.com"
    }
  ],
  "name": "stream-connect",
  "optionalDependencies": {},
  "readme": "[![view on npm](http://img.shields.io/npm/v/stream-connect.svg)](https://www.npmjs.org/package/stream-connect)\n[![npm module downloads](http://img.shields.io/npm/dt/stream-connect.svg)](https://www.npmjs.org/package/stream-connect)\n[![Build Status](https://travis-ci.org/75lb/stream-connect.svg?branch=master)](https://travis-ci.org/75lb/stream-connect)\n[![Coverage Status](https://coveralls.io/repos/75lb/stream-connect/badge.svg?branch=master&service=github)](https://coveralls.io/github/75lb/stream-connect?branch=master)\n[![Dependency Status](https://david-dm.org/75lb/stream-connect.svg)](https://david-dm.org/75lb/stream-connect)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](https://github.com/feross/standard)\n\n# stream-connect\n\nSimilar to `.pipe` except `.pipe` returns the last stream in a pipeline. stream-connect returns a stream which writes to the first stream in the pipeline and reads from the last.\n\n## Synopsis\n\n```js\nconst connect = require('stream-connect')\nconst fs = require('fs')\n\nconst connected = connect(stream1, stream2, stream3, stream4)\n\n// data piped into the connected stream is transparently passed through all four internal streams\n// then output into process.stdout. Errors in any of the internal streams are emitted\n// by the connected stream.\nprocess.stdin\n  .pipe(connected)\n  .on('error', console.error)\n  .pipe(process.stdout)\n```\n\n## More detail\n\nConsider this `.pipe` example.\n\n```js\nfunction getExampleStream () {\n ...\n return streamOne.pipe(streamTwo)\n}\nconst stream = getExampleStream()\nstream.on('data', function (chunk) {}) // catches data from streamOne via streamTwo\nstream.on('error', function (err) {}) // catches errors only from streamTwo\nstream.end('test') // is written to streamTwo\n```\n\nIf you write to the output it will be written to `streamTwo`, whereas you probably wanted to write to the  start of the pipeline and read from the end. Fixed by stream-connect:\n\n```js\nconst connect = require('stream-connect')\nfunction getExampleStream () {\n ...\n return connect(streamOne, streamTwo)\n}\nconst stream = getExampleStream()\nstream.on('data', function (chunk) {}) // catches data from streamOne via streamTwo\nstream.on('error', function (err) {}) // catches errors from both streamOne and streamTwo\nstream.end('test') // is written to streamOne\n```\n\nAny errors emitted in `streamOne` or `streamTwo` are propagated to the output stream.\n\n<a name=\"module_stream-connect\"></a>\n## stream-connect\n**Example**  \n```js\nconst connect = require('stream-connect')\n```\n<a name=\"exp_module_stream-connect--connect\"></a>\n### connect(...streams) ⇒ <code>[Duplex](https://nodejs.org/api/stream.html#stream_class_stream_duplex)</code> ⏏\nConnect streams.\n\n**Kind**: Exported function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| ...streams | <code>[Duplex](https://nodejs.org/api/stream.html#stream_class_stream_duplex)</code> | One or more streams to connect. |\n\n\n* * *\n\n&copy; 2015 Lloyd Brookes \\<75pound@gmail.com\\>. Documented by [jsdoc-to-markdown](https://github.com/jsdoc2md/jsdoc-to-markdown).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/75lb/stream-connect.git"
  },
  "scripts": {
    "cover": "istanbul cover ./node_modules/.bin/tape test/*.js && cat coverage/lcov.info | ./node_modules/.bin/coveralls && rm -rf coverage; echo",
    "docs": "jsdoc2md -t jsdoc2md/README.hbs lib/*.js > README.md; echo",
    "test": "tape test/*.js"
  },
  "version": "1.0.2"
}
