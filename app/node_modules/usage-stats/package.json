{
  "_args": [
    [
      {
        "raw": "usage-stats@^0.8.2",
        "scope": null,
        "escapedName": "usage-stats",
        "name": "usage-stats",
        "rawSpec": "^0.8.2",
        "spec": ">=0.8.2 <0.9.0",
        "type": "range"
      },
      "/Users/townerhale/Desktop/GitHub/final-project-mockup/app/node_modules/app-usage-stats"
    ]
  ],
  "_from": "usage-stats@>=0.8.2 <0.9.0",
  "_id": "usage-stats@0.8.6",
  "_inCache": true,
  "_location": "/usage-stats",
  "_nodeVersion": "8.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/usage-stats-0.8.6.tgz_1496572117935_0.9884169409051538"
  },
  "_npmUser": {
    "name": "75lb",
    "email": "75pound@gmail.com"
  },
  "_npmVersion": "5.0.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "usage-stats@^0.8.2",
    "scope": null,
    "escapedName": "usage-stats",
    "name": "usage-stats",
    "rawSpec": "^0.8.2",
    "spec": ">=0.8.2 <0.9.0",
    "type": "range"
  },
  "_requiredBy": [
    "/app-usage-stats"
  ],
  "_resolved": "https://registry.npmjs.org/usage-stats/-/usage-stats-0.8.6.tgz",
  "_shasum": "ec92559f648845c2021cbf5b4adea17af7513830",
  "_shrinkwrap": null,
  "_spec": "usage-stats@^0.8.2",
  "_where": "/Users/townerhale/Desktop/GitHub/final-project-mockup/app/node_modules/app-usage-stats",
  "author": {
    "name": "Lloyd Brookes",
    "email": "75pound@gmail.com"
  },
  "bin": {
    "usage-stats": "bin.js"
  },
  "bugs": {
    "url": "https://github.com/75lb/usage-stats/issues"
  },
  "dependencies": {
    "array-back": "^1.0.4",
    "cli-commands": "0.1.0",
    "core-js": "^2.4.1",
    "feature-detect-es6": "^1.3.1",
    "home-path": "^1.0.5",
    "mkdirp2": "^1.0.3",
    "req-then": "0.5.1",
    "typical": "^2.6.1",
    "uuid": "^3.0.1"
  },
  "description": "A minimal, offline-friendly Google Analytics Measurement Protocol client for tracking statistics in shell and javascript applications",
  "devDependencies": {
    "babel-preset-es2015": "^6.24.1",
    "core-assert": "~0.2.1",
    "coveralls": "^2.13.1",
    "jsdoc-to-markdown": "^3.0.0",
    "rimraf": "^2.6.1",
    "test-runner": "^0.3.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-QS1r7a1h5g1jo6KulvVGV+eQM+Jfj87AjJBfr1iaIJYz+N7+Qh7ezaVFCulwBGd8T1EidRiSYphG17gra2y0kg==",
    "shasum": "ec92559f648845c2021cbf5b4adea17af7513830",
    "tarball": "https://registry.npmjs.org/usage-stats/-/usage-stats-0.8.6.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "bf5c9103a6dd8521eb0956b2b70b9ec32c54c4d7",
  "homepage": "https://github.com/75lb/usage-stats#readme",
  "keywords": [
    "google",
    "analytics",
    "measurement",
    "protocol",
    "tracking",
    "usage",
    "stats",
    "app",
    "application",
    "ga"
  ],
  "license": "MIT",
  "main": "main.js",
  "maintainers": [
    {
      "name": "75lb",
      "email": "75pound@gmail.com"
    }
  ],
  "name": "usage-stats",
  "optionalDependencies": {},
  "readme": "[![view on npm](http://img.shields.io/npm/v/usage-stats.svg)](https://www.npmjs.org/package/usage-stats)\n[![npm module downloads](http://img.shields.io/npm/dt/usage-stats.svg)](https://www.npmjs.org/package/usage-stats)\n[![Build Status](https://travis-ci.org/75lb/usage-stats.svg?branch=master)](https://travis-ci.org/75lb/usage-stats)\n[![Coverage Status](https://coveralls.io/repos/github/75lb/usage-stats/badge.svg?branch=master)](https://coveralls.io/github/75lb/usage-stats?branch=master)\n[![Dependency Status](https://david-dm.org/75lb/usage-stats.svg)](https://david-dm.org/75lb/usage-stats)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](https://github.com/feross/standard)\n\n# usage-stats\n\nA minimal, offline-friendly [Google Analytics Measurement Protocol](https://developers.google.com/analytics/devguides/collection/protocol/v1/) client for tracking usage statistics in shell and javascript applications.\n\nThis is a low-level API client, it doesn't hold any opinion of how usage tracking should be done. If you're looking for a convention which leverages the power and flexibility of [Custom Metrics and Dimensions](https://support.google.com/analytics/answer/2709828?hl=en&ref_topic=2709827), take a look at [app-usage-stats](https://github.com/75lb/app-usage-stats).\n\n## Synopsis\n\n### Command line\n\nTracking statistics in shell scripts:\n\n```sh\n# Track an event: category 'Backup', action 'start'\nusage-stats event --tid UA-98765432-1 --ec Backup --ea start\n\n# Perform the backup\ncp files/** backup/\n\n# Track an event: category 'Backup', action 'complete'\nusage-stats event --tid UA-98765432-1 --ec Backup --ea complete\n```\n\n### API\n\nThe most trivial example.\n\n```js\nconst UsageStats = require('usage-stats')\nconst usageStats = new UsageStats('UA-98765432-1', { an: 'example' })\n\nusageStats.screenView('screen name')\nusageStats.event('category', 'action')\nusageStats.send()\n```\n\nMore realistic usage in a server application:\n\n```js\nconst UsageStats = require('usage-stats')\nconst usageStats = new UsageStats('UA-98765432-1', {\n  an: 'encode-video',\n  av: '1.0.0'\n})\n\n// start a new session\nusageStats.start()\n\n// user set two options..\nusageStats.event('option', 'verbose-level', 'infinite')\nusageStats.event('option', 'preset', 'iPod')\n\ntry {\n  // Begin. Track as a screenView.\n  usageStats.screenView('encoding')\n  beginEncoding(options)\n} catch (err) {\n  // Exception tracking\n  usageStats.exception(err.message, true)\n}\n\n// finished - mark the session as complete\n// and send stats (or store if offline).\nusageStats.end().send()\n```\n\n## Protocol Parameters\n\nSee [here](https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters) for the full list of Google Analytics Measurement Protocol parameters.\n\n### Sent by default\n\nAll parameters are send on demand, beside this list.\n\n* Operating System version (sent in the UserAgent)\n* [Client ID](https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#cid) (a random UUID, generated once per OS user and stored)\n* [Language](https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#ul) (`process.env.LANG`, if set)\n* [Screen resolution](https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#sr) (terminal rows by columns, by default)\n\n## CLI Reference\n\nTo install the command line client:\n\n```\n$ npm install -g usage-stats\n```\n\nRunning the tool with no arguments will print the usage guide:\n\n<pre><code><strong>usage-stats</strong>\n\n  A minimal, offline-friendly Google Analytics Measurement Protocol client for\n  tracking usage statistics in shell and javascript applications.\n\n<strong>Synopsis</strong>\n\n  $ usage-stats &lt;command&gt; &lt;command-options&gt;\n  $ usage-stats &lt;command&gt; --help\n\n<strong>Commands</strong>\n\n  screenview   Track a screenview\n  event        Track an event\n  exception    Track an exception\n</code></pre>\n\n## API Reference\n\n**Kind**: Exported class  \n* [UsageStats](#exp_module_usage-stats--UsageStats) ⏏\n    * [new UsageStats(trackingId, [options])](#new_module_usage-stats--UsageStats_new)\n    * [.dir](#module_usage-stats--UsageStats.UsageStats+dir) : <code>string</code>\n    * [.defaults](#module_usage-stats--UsageStats.UsageStats+defaults) : <code>Map</code>\n    * [.start([sessionParams])](#module_usage-stats--UsageStats+start) ↩︎\n    * [.end([sessionParams])](#module_usage-stats--UsageStats+end) ↩︎\n    * [.disable()](#module_usage-stats--UsageStats+disable) ↩︎\n    * [.enable()](#module_usage-stats--UsageStats+enable) ↩︎\n    * [.event(category, action, [options])](#module_usage-stats--UsageStats+event) ⇒ <code>Map</code>\n    * [.screenView(name, [options])](#module_usage-stats--UsageStats+screenView) ⇒ <code>Map</code>\n    * [.exception([options])](#module_usage-stats--UsageStats+exception) ⇒ <code>Map</code>\n    * [.send([options])](#module_usage-stats--UsageStats+send) ⇒ <code>Promise</code>\n    * [.debug()](#module_usage-stats--UsageStats+debug) ⇒ <code>Promise</code>\n    * [.abort()](#module_usage-stats--UsageStats+abort) ↩︎\n\n<a name=\"new_module_usage-stats--UsageStats_new\"></a>\n\n### new UsageStats(trackingId, [options])\n\n| Param | Type | Description |\n| --- | --- | --- |\n| trackingId | <code>string</code> | Google Analytics tracking ID (required). |\n| [options] | <code>object</code> |  |\n| [options.an] | <code>string</code> | App name |\n| [options.av] | <code>string</code> | App version |\n| [options.lang] | <code>string</code> | Language. Defaults to `process.env.LANG`. |\n| [options.sr] | <code>string</code> | Screen resolution. Defaults to `${process.stdout.rows}x${process.stdout.columns}`. |\n| [options.ua] | <code>string</code> | User Agent string to use. |\n| [options.dir] | <code>string</code> | Path of the directory used for persisting clientID and queue. Defaults to `~/.usage-stats`. |\n| [options.url] | <code>string</code> | Defaults to `'https://www.google-analytics.com/batch'`. |\n| [options.debugUrl] | <code>string</code> | Defaults to `'https://www.google-analytics.com/debug/collect'`. |\n\n**Example**  \n```js\nconst usageStats = new UsageStats('UA-98765432-1', {\n  an: 'sick app',\n  av: '1.0.0'\n})\n```\n<a name=\"module_usage-stats--UsageStats.UsageStats+dir\"></a>\n\n### usageStats.dir : <code>string</code>\nCache directory. Defaults to `~/.usage-stats`.\n\n**Kind**: instance property of <code>[UsageStats](#exp_module_usage-stats--UsageStats)</code>  \n<a name=\"module_usage-stats--UsageStats.UsageStats+defaults\"></a>\n\n### usageStats.defaults : <code>Map</code>\nA list of parameters to be to sent with every hit.\n\n**Kind**: instance property of <code>[UsageStats](#exp_module_usage-stats--UsageStats)</code>  \n**Example**  \n```js\nusageStats.defaults\n  .set('cd1', process.version)\n  .set('cd2', os.type())\n  .set('cd3', os.release())\n  .set('cd4', 'api')\n```\n<a name=\"module_usage-stats--UsageStats+start\"></a>\n\n### usageStats.start([sessionParams]) ↩︎\nStarts the [session](https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#sc).\n\n**Kind**: instance method of <code>[UsageStats](#exp_module_usage-stats--UsageStats)</code>  \n**Chainable**  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [sessionParams] | <code>Array.&lt;Map&gt;</code> | An optional map of paramaters to send with each hit in the sesison. |\n\n<a name=\"module_usage-stats--UsageStats+end\"></a>\n\n### usageStats.end([sessionParams]) ↩︎\nEnds the [session](https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#sc).\n\n**Kind**: instance method of <code>[UsageStats](#exp_module_usage-stats--UsageStats)</code>  \n**Chainable**  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [sessionParams] | <code>Array.&lt;Map&gt;</code> | An optional map of paramaters to send with the final hit of this sesison. |\n\n<a name=\"module_usage-stats--UsageStats+disable\"></a>\n\n### usageStats.disable() ↩︎\nDisable the module. While disabled, all operations are no-ops.\n\n**Kind**: instance method of <code>[UsageStats](#exp_module_usage-stats--UsageStats)</code>  \n**Chainable**  \n<a name=\"module_usage-stats--UsageStats+enable\"></a>\n\n### usageStats.enable() ↩︎\nRe-enable the module.\n\n**Kind**: instance method of <code>[UsageStats](#exp_module_usage-stats--UsageStats)</code>  \n**Chainable**  \n<a name=\"module_usage-stats--UsageStats+event\"></a>\n\n### usageStats.event(category, action, [options]) ⇒ <code>Map</code>\nTrack an event. All event hits are queued until `.send()` is called.\n\n**Kind**: instance method of <code>[UsageStats](#exp_module_usage-stats--UsageStats)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| category | <code>string</code> | Event category (required). |\n| action | <code>string</code> | Event action (required). |\n| [options] | <code>option</code> |  |\n| [options.el] | <code>string</code> | Event label |\n| [options.ev] | <code>string</code> | Event value |\n| [options.hitParams] | <code>Array.&lt;map&gt;</code> | One or more additional params to send with the hit. |\n\n<a name=\"module_usage-stats--UsageStats+screenView\"></a>\n\n### usageStats.screenView(name, [options]) ⇒ <code>Map</code>\nTrack a screenview. All screenview hits are queued until `.send()` is called. Returns the hit instance.\n\n**Kind**: instance method of <code>[UsageStats](#exp_module_usage-stats--UsageStats)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| name | <code>string</code> | Screen name |\n| [options] | <code>object</code> |  |\n| [options.hitParams] | <code>Array.&lt;map&gt;</code> | One or more additional params to set on the hit. |\n\n<a name=\"module_usage-stats--UsageStats+exception\"></a>\n\n### usageStats.exception([options]) ⇒ <code>Map</code>\nTrack a exception. All exception hits are queued until `.send()` is called.\n\n**Kind**: instance method of <code>[UsageStats](#exp_module_usage-stats--UsageStats)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [options] | <code>object</code> | optional params |\n| [options.exd] | <code>string</code> | Error message |\n| [options.exf] | <code>boolean</code> | Set true if the exception was fatal |\n| [options.hitParams] | <code>Array.&lt;map&gt;</code> | One or more additional params to set on the hit. |\n\n<a name=\"module_usage-stats--UsageStats+send\"></a>\n\n### usageStats.send([options]) ⇒ <code>Promise</code>\nSend queued stats using as few requests as possible (typically a single request - a max of 20 events/screenviews may be sent per request). If offline, the stats will be stored and re-tried on next invocation.\n\n**Kind**: instance method of <code>[UsageStats](#exp_module_usage-stats--UsageStats)</code>  \n**Fulfil**: <code>response[]</code> - array of responses. Each response has `data` and the original node `res`.  \n**Reject**: <code>Error</code> - Rejects with the first error encountered. The error is a standard node http error with a `name` of `request-fail` and a `hits` property showing what failed to send.  \n\n| Param | Type |\n| --- | --- |\n| [options] | <code>object</code> | \n| [options.timeout] | <code>number</code> | \n\n<a name=\"module_usage-stats--UsageStats+debug\"></a>\n\n### usageStats.debug() ⇒ <code>Promise</code>\nSend any hits (including queued) to the GA [validation server](https://developers.google.com/analytics/devguides/collection/protocol/v1/validating-hits), fulfilling with the result.\n\n**Kind**: instance method of <code>[UsageStats](#exp_module_usage-stats--UsageStats)</code>  \n**Fulfil**: <code>Response[]</code>  \n**Reject**: <code>Error</code> - Error instance includes `hits`.  \n<a name=\"module_usage-stats--UsageStats+abort\"></a>\n\n### usageStats.abort() ↩︎\nAborts the in-progress .send() operation, queuing any unsent hits.\n\n**Kind**: instance method of <code>[UsageStats](#exp_module_usage-stats--UsageStats)</code>  \n**Chainable**  \n\n* * *\n\n&copy; 2016-17 Lloyd Brookes \\<75pound@gmail.com\\>. Documented by [jsdoc-to-markdown](https://github.com/jsdoc2md/jsdoc-to-markdown).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/75lb/usage-stats.git"
  },
  "scripts": {
    "cover": "istanbul cover ./node_modules/.bin/test-runner src/test/*.js && cat coverage/lcov.info | ./node_modules/.bin/coveralls && rm -rf coverage; echo",
    "docs": "jsdoc2md -t jsdoc2md/README.hbs src/lib/usage-stats.js > README.md; echo",
    "es5": "rm -rf es5 && babel --presets babel-preset-es2015 --no-comments src --out-dir es5",
    "test": "node test.js"
  },
  "standard": {
    "ignore": [
      "es5"
    ]
  },
  "version": "0.8.6"
}
